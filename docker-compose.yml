version: "3.5"

x-environment:
  &default-back-environment
  # Database settings
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_HOST: ${POSTGRES_HOST}
  # Taiga settings
  TAIGA_SECRET_KEY: "${TAIGA_SECRET_KEY}"
  TAIGA_SITES_SCHEME: "${TAIGA_SITES_SCHEME}"
  TAIGA_SITES_DOMAIN: "${TAIGA_SITES_DOMAIN}"
  TAIGA_SSL_BY_REVERSE_PROXY: "${TAIGA_SSL_BY_REVERSE_PROXY}"
  TAIGA_SUBPATH: "${TAIGA_SUBPATH}" # "" or "/subpath"
  # Email settings. Uncomment following lines and configure your SMTP server
  EMAIL_BACKEND: "django.core.mail.backends.smtp.EmailBackend"
  DEFAULT_FROM_EMAIL: "${DEFAULT_FROM_EMAIL}"
  EMAIL_USE_TLS: "${EMAIL_USE_TLS}"
  EMAIL_USE_SSL: "${EMAIL_USE_SSL}"
  EMAIL_HOST: "${EMAIL_HOST}"
  EMAIL_PORT: ${EMAIL_PORT}
  EMAIL_HOST_USER: "${EMAIL_HOST_USER}"
  EMAIL_HOST_PASSWORD: "${EMAIL_HOST_PASSWORD}"
  # Rabbitmq settings
  # Should be the same as in taiga-async-rabbitmq and taiga-events-rabbitmq
  RABBITMQ_USER: ${RABBITMQ_USER}
  RABBITMQ_PASS: ${RABBITMQ_PASS}
  # Telemetry settings
  ENABLE_TELEMETRY: "${ENABLE_TELEMETRY}"

x-volumes:
  &default-back-volumes
  - taiga-static-data:/taiga-back/static
  - taiga-media-data:/taiga-back/media
  # - ./config.py:/taiga-back/settings/config.py


services:
  taiga-db:
    image: postgres:12.3
    labels:
      - docker-volume-backup.stop-during-backup=taiga-db
      - docker-volume-backup.archive-pre=/bin/sh -c 'pg_dump -Fc --no-acl --no-owner -U ${POSTGRES_USER} -w ${POSTGRES_DB} > /tmp/dumps/taiga-db_backup_$$(date "+%Y%m%d_%H%M%S").out'
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes:
      - taiga-db-data:/var/lib/postgresql/data
      - taiga-db-data:/tmp/dumps
    networks:
      - taiga

  taiga-back:
    image: taigaio/taiga-back:latest
    labels:
      - docker-volume-backup.stop-during-backup=taiga-back
    environment:
      <<: *default-back-environment
      ENABLE_SLACK: "true"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes: *default-back-volumes
    networks:
      - taiga
    depends_on:
      - taiga-db
      - taiga-events-rabbitmq
      - taiga-async-rabbitmq

  taiga-async:
    image: taigaio/taiga-back:latest
    entrypoint: ["/taiga-back/docker/async_entrypoint.sh"]
    environment: *default-back-environment
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes: *default-back-volumes
    networks:
      - taiga
    depends_on:
      - taiga-db
      - taiga-back
      - taiga-async-rabbitmq

  taiga-async-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    labels:
      - docker-volume-backup.stop-during-backup=taiga-async-rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes:
      - taiga-async-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - taiga

  taiga-front:
    image: taigaio/taiga-front:latest
    environment:
      TAIGA_URL: "${TAIGA_URL}"
      TAIGA_WEBSOCKETS_URL: "${TAIGA_WEBSOCKETS_URL}"
      TAIGA_SUBPATH: "${TAIGA_SUBPATH}" # "" or "/subpath"
      ENABLE_SLACK: "true"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    networks:
      - taiga
    # volumes:
    #   - ./conf.json:/usr/share/nginx/html/conf.json

  taiga-events:
    image: taigaio/taiga-events:latest
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      TAIGA_SECRET_KEY: "${TAIGA_SECRET_KEY}"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    networks:
      - taiga
    depends_on:
      - taiga-events-rabbitmq

  taiga-events-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    labels:
      - docker-volume-backup.stop-during-backup=taiga-events-rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes:
      - taiga-events-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - taiga

  taiga-protected:
    image: taigaio/taiga-protected:latest
    environment:
      MAX_AGE: 360
      SECRET_KEY: "${TAIGA_SECRET_KEY}"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    networks:
      - taiga

  taiga-gateway:
    image: nginx:1.19-alpine
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes:
      - ./taiga-gateway/taiga.conf:/etc/nginx/conf.d/default.conf
      - taiga-static-data:/taiga/static
      - taiga-media-data:/taiga/media
    networks:
      - taiga
      - backend
    depends_on:
      - taiga-front
      - taiga-back
      - taiga-events
    environment:
      VIRTUAL_HOST: "${VIRTUAL_HOST}"
      LETSENCRYPT_HOST: "${LETSENCRYPT_HOST}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"

  backup_db: &backup_service
    image: offen/docker-volume-backup:v2.21.0
    restart: always
    environment: &backup_environment
      BACKUP_CRON_EXPRESSION: ${BACKUP_CRON_EXPRESSION}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS}
      EXEC_FORWARD_OUTPUT: "true"
      NOTIFICATION_LEVEL: ${NOTIFICATION_LEVEL}
      NOTIFICATION_URLS: ${NOTIFICATION_URLS}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_ENDPOINT: ${AWS_ENDPOINT}
      AWS_S3_PATH: ${AWS_S3_PATH}
      LOCAL_BACKUP_LOCATION: ${LOCAL_BACKUP_LOCATION}
      BACKUP_STOP_CONTAINER_LABEL: taiga-db
      BACKUP_FILENAME: taiga-db-backup-%Y-%m-%dT%H-%M-%S.tar.gz
      BACKUP_LATEST_SYMLINK: taiga-db-backup-latest.tar.gz
      BACKUP_PRUNING_PREFIX: taiga-db-backup-
    volumes:
      - taiga-db-data:/backup/taiga-db-backup:ro
      # Mounting the Docker socket allows the script to stop and restart
      # the container during backup. You can omit this if you don't want
      # to stop the container. In case you need to proxy the socket, you can
      # also provide a location by setting `DOCKER_HOST` in the container
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # If you mount a local directory or volume to `/archive` a local
      # copy of the backup will be stored there. You can override the
      # location inside of the container by setting `BACKUP_ARCHIVE`.
      # You can omit this if you do not want to keep local backups.
      - ${HOME}/${LOCAL_BACKUP_LOCATION}:/archive
      #  In case you want to run your cron rules in your local timezone
      # (respecting DST and similar), you can mount your Docker host's
      # /etc/timezone and /etc/localtime in read-only mode:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  backup_backend:
    <<: *backup_service
    environment:
      <<: *backup_environment
      BACKUP_STOP_CONTAINER_LABEL: taiga-back
      BACKUP_FILENAME: taiga-backend-backup-%Y-%m-%dT%H-%M-%S.tar.gz
      BACKUP_LATEST_SYMLINK: taiga-backend-backup-latest.tar.gz
      BACKUP_PRUNING_PREFIX: taiga-backend-backup-
    volumes:
      - taiga-static-data:/backup/taiga-static-backup:ro
      - taiga-media-data:/backup/taiga-media-backup:ro
      # Mounting the Docker socket allows the script to stop and restart
      # the container during backup. You can omit this if you don't want
      # to stop the container. In case you need to proxy the socket, you can
      # also provide a location by setting `DOCKER_HOST` in the container
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # If you mount a local directory or volume to `/archive` a local
      # copy of the backup will be stored there. You can override the
      # location inside of the container by setting `BACKUP_ARCHIVE`.
      # You can omit this if you do not want to keep local backups.
      - ${HOME}/${LOCAL_BACKUP_LOCATION}:/archive
      #  In case you want to run your cron rules in your local timezone
      # (respecting DST and similar), you can mount your Docker host's
      # /etc/timezone and /etc/localtime in read-only mode:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro


  backup_async_rabbitmq:
    <<: *backup_service
    environment:
      <<: *backup_environment
      BACKUP_STOP_CONTAINER_LABEL: taiga-async-rabbitmq
      BACKUP_FILENAME: taiga-async-rabbitmq-backup-%Y-%m-%dT%H-%M-%S.tar.gz
      BACKUP_LATEST_SYMLINK: taiga-async-rabbitmq-backup-latest.tar.gz
      BACKUP_PRUNING_PREFIX: taiga-async-rabbitmq-backup-
    volumes:
      - taiga-async-rabbitmq-data:/backup/taiga-async-rabbitmq-backup:ro
      # Mounting the Docker socket allows the script to stop and restart
      # the container during backup. You can omit this if you don't want
      # to stop the container. In case you need to proxy the socket, you can
      # also provide a location by setting `DOCKER_HOST` in the container
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # If you mount a local directory or volume to `/archive` a local
      # copy of the backup will be stored there. You can override the
      # location inside of the container by setting `BACKUP_ARCHIVE`.
      # You can omit this if you do not want to keep local backups.
      - ${HOME}/${LOCAL_BACKUP_LOCATION}:/archive
      #  In case you want to run your cron rules in your local timezone
      # (respecting DST and similar), you can mount your Docker host's
      # /etc/timezone and /etc/localtime in read-only mode:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro


  backup_events_rabbitmq:
    <<: *backup_service
    environment:
      <<: *backup_environment
      BACKUP_STOP_CONTAINER_LABEL: taiga-events-rabbitmq
      BACKUP_FILENAME: taiga-events-rabbitmq-backup-%Y-%m-%dT%H-%M-%S.tar.gz
      BACKUP_LATEST_SYMLINK: taiga-events-rabbitmq-backup-latest.tar.gz
      BACKUP_PRUNING_PREFIX: taiga-events-rabbitmq-backup-
    volumes:
      - taiga-events-rabbitmq-data:/backup/taiga-events-rabbitmq-backup:ro
      # Mounting the Docker socket allows the script to stop and restart
      # the container during backup. You can omit this if you don't want
      # to stop the container. In case you need to proxy the socket, you can
      # also provide a location by setting `DOCKER_HOST` in the container
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # If you mount a local directory or volume to `/archive` a local
      # copy of the backup will be stored there. You can override the
      # location inside of the container by setting `BACKUP_ARCHIVE`.
      # You can omit this if you do not want to keep local backups.
      - ${HOME}/${LOCAL_BACKUP_LOCATION}:/archive
      #  In case you want to run your cron rules in your local timezone
      # (respecting DST and similar), you can mount your Docker host's
      # /etc/timezone and /etc/localtime in read-only mode:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

volumes:
  taiga-static-data:
  taiga-media-data:
  taiga-db-data:
  taiga-async-rabbitmq-data:
  taiga-events-rabbitmq-data:

networks:
  taiga:
  backend:
    external: true
    name: nginx-proxy_and_companion_backend
